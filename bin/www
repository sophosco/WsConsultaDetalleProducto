#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('wsconsultadetalleproducto:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/*
* Disable self SSL error in Development enviroment
*/
if(process.env.APP_ENV || 'dev'){
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
}

/**
 * Get server an port of security service from environment.
 */
if(process.env.SERVER_SECURITY_SERVICE == undefined){
    process.env.SERVER_SECURITY_SERVICE = "ec2-3-17-205-42.us-east-2.compute.amazonaws.com";
}
if(process.env.PORT_SECURITY_SERVICE == undefined){
    process.env.PORT_SECURITY_SERVICE = "9443";
}

/**
 * Get server an port of Aval PoC service from environment.
 */
if(process.env.SERVER_AVAL_SERVICE == undefined){
  process.env.SERVER_AVAL_SERVICE = "localhost";
}
if(process.env.PORT_AVAL_SERVICE == undefined){
  process.env.PORT_AVAL_SERVICE = "8080";
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '8443');
app.set('port', port);

/**
 * Create HTTP server.
 */
// we will pass our 'app' to 'https' server
var server = https.createServer({
  key: fs.readFileSync('./security/key.pem'),
  cert: fs.readFileSync('./security/cert.pem'),
  passphrase: 'Sophos'
}, app).listen(port);


/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
